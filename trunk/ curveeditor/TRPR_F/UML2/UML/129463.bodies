class Linear
!!!133815.java!!!	Linear(in type : char, in degree : short)
		super(type, (short) degree);
!!!133943.java!!!	Linear(in degree : short)
		super('L', (short) degree);
!!!134071.java!!!	Linear()
		super('L', (short) 1);
!!!134199.java!!!	findYForX(in x : int, in x0 : int, in y0 : int, in x1 : int, in y1 : int) : int
		if (x1 - x0 == 0)
			throw new DivisionByZeroException();

		return (int) ((double) y0 + (x - (double) x0)
				* ((y1 - y0) / ((double) x1 - x0)));
!!!134327.java!!!	findXForY(in y : int, in x0 : int, in y0 : int, in x1 : int, in y1 : int) : int
		if (y1 - y0 == 0)
			throw new DivisionByZeroException();

		return (int) ((double) x0 + (y - (double) y0)
				* ((x1 - x0) / ((double) y1 - y0)));
!!!134455.java!!!	calculate(inout input : Vector<Point>, inout output : Vector<Point>) : void
		if (input == null || output == null)
			throw new InvalidArgumentException(
					"Linear.java - calculate(Vector, Vector): Invalid Argument.");
		else {
			output.clear();

			// Voor elk paar punten de interpolatiepunten berekenen.
			for (int i = 0; i < input.size() - 1; ++i) {

				// Positief verschil in x-waarden.
				int diff1 = (input.get(i).X() < input.get(i + 1).X()) ? input
						.get(i + 1).X()
						- input.get(i).X() : input.get(i).X()
						- input.get(i + 1).X();

				// Positief verschil in y-waarden.
				int diff2 = (input.get(i).Y() < input.get(i + 1).Y()) ? input
						.get(i + 1).Y()
						- input.get(i).Y() : input.get(i).Y()
						- input.get(i + 1).Y();

				try {

					// Lijnstuk stijgt sneller volgens X dan volgens Y
					// --> voor elke X de Y zoeken.
					if (diff1 > diff2) {
						// Eerste controlepunt ligt links van het tweede.
						if (input.get(i).X() < input.get(i + 1).X()) {
							for (int x = input.get(i).X(); x <= input
									.get(i + 1).X(); ++x) {
								output.add(new Point(x, findYForX(x, input.get(
										i).X(), input.get(i).Y(), input.get(
										i + 1).X(), input.get(i + 1).Y())));
							}
						}
						// Eerste controlepunt ligt rechts van het tweede.
						else {
							for (int x = input.get(i).X(); x >= input
									.get(i + 1).X(); --x) {
								output.add(new Point(x, findYForX(x, input.get(
										i).X(), input.get(i).Y(), input.get(
										i + 1).X(), input.get(i + 1).Y())));
							}
						}
					}
					// Lijnstuk stijgt sneller volgens Y dan volgens X
					// --> voor elke Y de X zoeken.
					else {
						// Eerste controlepunt ligt onder het tweede.
						if (input.get(i).Y() < input.get(i + 1).Y()) {
							for (int y = input.get(i).Y(); y <= input
									.get(i + 1).Y(); ++y) {
								output.add(new Point(findXForY(y, input.get(i)
										.X(), input.get(i).Y(), input
										.get(i + 1).X(), input.get(i + 1).Y()),
										y));
							}
						}
						// Eerste controlepunt ligt boven het tweede.
						else {
							for (int y = input.get(i).Y(); y >= input
									.get(i + 1).Y(); --y) {
								output.add(new Point(findXForY(y, input.get(i)
										.X(), input.get(i).Y(), input
										.get(i + 1).X(), input.get(i + 1).Y()),
										y));
							}
						}
					}
				} catch (DivisionByZeroException e) {
					output.clear();
					throw new InvalidArgumentException(
							"Linear.java - calculate(Vector, Vector): Division by zero.");
				}
			}
		}
!!!134583.java!!!	calculateComplete(inout c : Curve) : void
		try {
			calculate(c);
		} catch (InvalidArgumentException e) {
			if (c != null)
				c.clearOutput();

			throw e;
		}
